<rml>
<head>
	<title>home</title>
	<link type="text/template" href="template_racemod.rml" />
	<script src="as/racemod_hudoptions.as"></script>
	<script>
		ElementFormControl@ hudClient;
		ElementFormControl@ hudSpec;
		Cvar cg_clientHUD( "cg_clientHUD", "default", ::CVAR_ARCHIVE );
		Cvar cg_specHUD( "cg_specHUD", "default", ::CVAR_ARCHIVE );
		Cvar racemod_seenintro( "racemod_seenintro", "0", ::CVAR_ARCHIVE | ::CVAR_USERINFO );

		void onPlayerLoad( Element@ body, Event@ evt )
		{
			URL url( body.ownerDocument.URL );
			const Dictionary @dict = url.getParameters();
			String ignore = '';
			String recommended = '';
			dict.get( 'ignore', ignore );
			dict.get( 'recommended', recommended );

			if ( ignore != "1" && !CheckRead() )
			{
				return;
			}

			if ( recommended == "1" )
			{
				loadRecommended();
			}

			onTemplateLoad( body, evt );

			@hudClient = body.getElementById( "hud-client" );
			@hudSpec = body.getElementById( "hud-spec" );

			String defaultHUD = 'default';
			if( cg_clientHUD.string.empty() ) {
				cg_clientHUD.set( defaultHUD );
				if( @hudClient != null ) {
					hudClient.value = defaultHUD;
				}
			}
			if( cg_specHUD.string.empty() ) {
				cg_specHUD.set( defaultHUD );
				if( @hudSpec != null ) {
					hudSpec.value = defaultHUD;
				}
			}
		}

		void onPlayerShow( Element@ body, Event@ evt )
		{
			onCustomShow( body, evt );
			loadSettings();
		}

		void loadSettings() {
			Element@ body = window.document.body;
			ElementOptionsForm@ f = body.getElementById("hud-options-form");
			f.storeOptions();
			
			@f = body.getElementById("hud-options-extra-form");
			f.storeOptions();

			@f = body.getElementById("binds-options-form");
			f.storeOptions();

			@f = body.getElementById("game-options-form");
			f.storeOptions();

			@hudClient = body.getElementById( "hud-client" );
			loadHudOptions(hudClient.value);
		}

		void onHudSelect( ElementFormControl@ elem ) {
			String@ hud = elem.value;
			loadHudOptions(hud);
		}

		void loadHudOptions( String hud )
		{
			window.document.body.getElementById("hudopts-loader").setAttr("src", "../../huds/"+hud+".hudoptions");
		}

		void onHudOptsLoad( Element@ elem, Event@ evt )
		{
			if( evt.getPhase() != EVENT_PHASE_TARGET )
			{
				return;
			}
			if( elem.getAttr( 'src', '' ).empty() )
			{
				return;
			}

			Element@ hudOptionsDefault = window.document.body.getElementById("hud-options-default");
			Element@ hudOptionsCustom = window.document.body.getElementById("hud-options-custom");

			String@ contents = elem.getInnerRML();
			String rml = "";
			if ( contents.locate("Failed to load", 0) == 0 )
			{
				// no hud options file found
				rml += '<div class="title">Show Strafe HUD</div>';
				rml += '<input cvar="cg_strafeHUD" type="checkbox" realtime="1"/>';

				rml += '<div class="title">Show Speed</div>';
				rml += '<input cvar="cg_showSpeed" type="checkbox" realtime="1"/>';
			} else {
				// hud options file found
				// parse hud options file
				HUDOption@[] hudOptions = parseHUDOptions( contents );

				for ( uint i = 0; i < hudOptions.length; i++ ) 
				{
					rml += hudOptions[i].render();
				}
			}
			hudOptionsDefault.setInnerRML(rml);
			ElementOptionsForm@ f = window.document.body.getElementById("hud-options-extra-form");
			f.storeOptions();
		}

		void setupCustomMenu( Element @body )
		{
			setModalY( 0.5f );
		}

		void onCloseButton( Element @self, Event @evt)
		{
			window.close();
		}
		
		void onCustomShow( Element @body, Event @evt )
		{
			setupCustomMenu( body );
			animationsOnShow();
		}

		void btn_vertexlight( Element@ self, Event@ evt )
		{
			game.execAppend( "toggle r_lighting_vertexlight; vid_restart\n" );
			window.close();
		}

		void btn_toplist( Element@ self, Event@ evt )
		{
			game.execAppend( "top; toggleconsole\n" );
			window.close();
		}

		void btn_randmap( Element@ self, Event@ evt )
		{
			game.execAppend( "callvote randmap *\n" );
			window.close();
		}

		void btn_texturepack( Element@ self, Event@ evt )
		{
		}

		void btn_recommended( Element@ self, Event@ evt )
		{
			loadRecommended();
		}

		void loadRecommended()
		{
			// game.exec( "exec configs/racemod_recommended.cfg silent\n" );
			// can't execute configs in pk3's ?

			game.execAppend('seta cg_clientHUD "ale_racemod"\n');
			game.execAppend('seta cg_specHUD "ale_racemod"\n');

			game.execAppend('seta cg_strafeHUD "1"\n');
			game.execAppend('seta cg_showSpeed "1"\n');
			game.execAppend('seta cg_showPressedKeys "1"\n');

			game.execAppend('seta cg_raceGhosts "1"\n');
			game.execAppend('seta cg_raceGhostsAlpha "0.5"\n');

			game.execAppend("menu_open racemod_main ignore 1\n");
			window.close();
		}

		bool CheckRead() {
			if ( racemod_seenintro.boolean ) {
				return true;
			} else {
				window.location = "racemod_intro.rml";
				return false;
			}
		}

		void btn_help( Element@ self, Event@ evt )
		{
			window.location = "racemod_help.rml";
		}
	</script>
</head>
<body template="porkui_racemod" onload="$onPlayerLoad" onshow="$onPlayerShow">
	<div id="menu-ingame">
		<button id="close-button" onclick="$onCloseButton" />

		<h1>Racemod Options</h1>
		<div id="menu-racemod">
			<div id="leftcolumn">
				<tabset id="options-set">
					<tab class="side-tab">Hud Options</tab>
					<panel class="dropshadow">
						<optionsform id="hud-options-form">
							<div class="title">Client HUD</div>
							<dataselect id="hud-client" cvar="cg_clientHUD" source="huds.list" fields="name" valuefield="name" realtime="1" onchange="onHudSelect(self);" />

							<div class="title">Spectator HUD</div>
							<dataselect id="hud-spec" cvar="cg_specHUD" source="huds.list" fields="name" valuefield="name" realtime="1" />
						</optionsform>

						<hr class="nicehr"/><br />

						<idiv id="hudopts-loader" src="" onload="$onHudOptsLoad" />
						<optionsform id="hud-options-extra-form">
							<div id="hud-options-default"></div>
						</optionsform>
					</panel>

					<tab class="side-tab">Binds</tab>
					<panel class="dropshadow">
						<optionsform id="binds-options-form">
							<div class="title">Restart race</div>
							<keyselect bind="join"/>
							<div class="title"><t>Grenade Launcher</t> (GL)</div>
							<keyselect bind="use Grenade Launcher"/>
							<div class="title"><t>Rocket Launcher</t> (RL)</div>
							<keyselect bind="use Rocket Launcher"/>
							<div class="title"><t>Plasmagun</t> (PG)</div>
							<keyselect bind="use Plasmagun"/>
							<div class="title">Toggle practicemode</div>
							<keyselect bind="practicemode"/>
							<div class="title">Save position</div>
							<keyselect bind="position save"/>
							<div class="title">Noclip mode</div>
							<keyselect bind="noclip"/>
							<div class="title">Quickmenu</div>
							<keyselect bind="+quickmenu"/>
							<div class="title">Open this menu</div>
							<keyselect bind="gametypemenu"/>
						</optionsform>
					</panel>

					<tab class="side-tab">Game Options</tab>
					<panel class="dropshadow">
						<optionsform id="game-options-form">
							<div class="title">Enable transparent players</div>
							<input cvar="cg_raceGhosts" type="checkbox" realtime="1"/>
							<div class="title">Transparent players opacity</div>
							<input cvar="cg_raceGhostsAlpha" class="slider" type="range" min="0" max="1" step="0.05" value="0" realtime="1"/>
							<div class="title">I have seen the intro message</div>
							<input cvar="racemod_seenintro" type="checkbox" realtime="1"/>
						</optionsform>
					</panel>
				</tabset>
			</div>
			<div id="rightcolumn">
				<h2>Commands</h2>
				<div>
					<button onclick="$btn_recommended">Recommended settings</button>
					<button onclick="$btn_toplist">Show toplist</button>
					<button onclick="$btn_randmap">Vote random map</button>
				</div>
				<h2>Help</h2>
				<div>
					<button onclick="$btn_help">Help</button>
					<a class="button" href="https://www.youtube.com/watch?v=ZXYvRqMTqao" target="_browser">Race Tutorial<br />(opens in browser)</a>
					<button onclick="$btn_vertexlight">Toggle vertexlight<br />(fixes some maps)</button>
					<!-- <button onclick="$btn_texturepack">Texture pack?</button> -->
				</div>
			</div>
		</div>
	</div>
</body>
</rml>